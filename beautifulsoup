# Função para obter o valor de um atributo dentro de uma tag
def get_attribute_value(tag, attribute):
    for attr in tag[1:]:
        if attr.startswith(attribute):
            return attr.split('="')[1].rstrip('"')
    return None

# Função para imprimir as informações de uma tag
def print_tag_info(tag, level):
    tag_name = tag.split()[0].lstrip('<')
    print("Tag de abertura:", tag_name, ", Nível", level)

    # Verifica se a tag possui atributos
    if ' ' in tag:
        attributes = tag.split()[1:]
        for attribute in attributes:
            if '=' in attribute:
                attribute_name, attribute_value = attribute.split('=')
                print("Atributo de Tag:", attribute_name)
                print("valor atributo", attribute_name + ":", attribute_value.rstrip('"'))

    # Verifica se a tag possui conteúdo
    if '>' in tag:
        content = tag.split('>', 1)[1].split('<')[0]
        print("conteúdo da tag:", content)

# Função para analisar as tags
def analyze_tags(html, level=0):
    tags = html.split('<')[1:]

    for tag in tags:
        if tag.startswith('/'):
            print("Tag de fechamento:", tag.lstrip('/'))
        else:
            print_tag_info(tag, level)
            if '>' in tag:
                content_start_index = tag.index('>') + 1
                content_end_index = tag.rindex('<')
                content = tag[content_start_index:content_end_index]
                analyze_tags(content, level+1)

# Código HTML de entrada
html_code = '''
<html>
<head>
<title>Compiladores</title>
</head>
<body>
<p style="color:red;background:blue;" id="abc">Unipinhal</p>
<br>
</body>
</html>
'''

# Chamada da função para analisar as tags
analyze_tags(html_code)